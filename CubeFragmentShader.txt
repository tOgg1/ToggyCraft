#version 330 core

in vec3 position_worldspace;
in vec3 normal_cameraspace;
in vec3 eyeDirection_cameraspace;

out vec4 color;

uniform mat4 MV;

void main()
{

	vec3 lightColor = vec3(1,1,1);
	float lightPower = 5.0f;

	vec3 materialDiffuseColor = vec3(1,1,1);
	vec3 materialAmbientColor = vec3(0.5, 0.5, 0.5) * materialDiffuseColor;
	vec3 materialSpecularColor = vec3(0.3, 0.3, 0.3);

	vec3 normalDir = normalize(normal_cameraspace);
	vec3 lightDir = vec3(0, -1, 0);

	float attenuation = clamp(dot(normalDir, lightDir), 0, 1);

	vec3 eyeDir = normalize(eyeDirection_cameraspace);
	vec3 reflectDir = reflect(-lightDir, normalDir);

	float specAttenuation = clamp(dot(eyeDir, reflectDir), 0, 1);

	color.rgb = materialAmbientColor + 
			materialDiffuseColor * attenuation * lightColor * lightPower +
			materialSpecularColor * lightColor * lightPower * pow(specAttenuation, 5);

	color.a = 1.0;
}